[
  {
    "slug": "building-this-portfolio",
    "title": "Building This Portfolio - A Labor of Love and Necessity",
    "date": "2024-10-09",
    "tags": [
      "personal",
      "career",
      "web-development"
    ],
    "author": "Tian Pretorius",
    "image": "https://images.unsplash.com/photo-1498050108023-c5249f4df085?w=1200&h=630&fit=crop",
    "coverImage": "https://images.unsplash.com/photo-1498050108023-c5249f4df085?w=1200&h=630&fit=crop",
    "tldr": "How building this portfolio gave me purpose during unemployment, taught me the value of constraint-driven design, and reminded me why I love creating things.",
    "content": "\r\n# Building This Portfolio - A Labor of Love and Necessity\r\n\r\nI'll be honest—this portfolio came out of necessity. But it also came from something deeper: the need to build, to create, to feel productive when everything else felt uncertain.\r\n\r\nThe past few months have been... well, let's just say they haven't been what I expected. After being unemployed for longer than I'd care to admit, I found myself in a strange limbo. No job offers coming through, no daily routine, no sense of forward momentum. It's easy to feel a bit dejected when you're in that space.\r\n\r\nBut here's what I've learned: when you're a builder at heart, you don't stop building just because the circumstances aren't ideal.\r\n\r\n## Why I Built This\r\n\r\nAt first, it was purely practical. I needed a portfolio. A place to showcase my work, share my thoughts, and hopefully catch the attention of someone who might want to hire me. The standard LinkedIn profile and resume just weren't cutting it—I needed something more, something that showed not just what I'd done, but who I am as an engineer.\r\n\r\nBut as I started working on it, something shifted. The act of building this site became more than just a job-hunting tool. It became a lifeline.\r\n\r\nWhen you're unemployed, it's easy to lose your sense of purpose. Days blend together. You start questioning your skills, your worth, your place in this industry. But when you're creating something—even something as simple as a personal website—you remember why you got into this field in the first place.\r\n\r\n**Building gives me purpose.** And right now, that's not abundant.\r\n\r\n## The Constraint That Shaped Everything\r\n\r\nHere's the thing about being unemployed: you don't have money for fancy hosting services. No AWS credits, no Vercel Pro, no fancy CDN. Every dollar counts.\r\n\r\nSo I went looking for free hosting options, and that's when I found GitHub Pages.\r\n\r\nIt was perfect—free, reliable, and git-based (which I already knew). But it came with its own quirks. GitHub Pages is designed for static sites, and while that's great for performance, it meant I had to think differently about how I structured everything.\r\n\r\nNo backend. No database. Just HTML, CSS, JavaScript, and some markdown files.\r\n\r\nAnd you know what? That constraint was liberating.\r\n\r\nInstead of reaching for a framework or a CMS, I had to think about what I actually needed. Not what was trendy or what everyone else was using, but what would solve my specific problem with the resources I had.\r\n\r\n## The Ups and Downs\r\n\r\nWas it smooth sailing? Not exactly.\r\n\r\nGitHub Pages has its quirks—deployment can be finicky, there are some limitations on how you can structure things, and the documentation assumes you know more than you might. I hit walls. I got frustrated. There were definitely moments where I wanted to just pay for hosting somewhere else and be done with it.\r\n\r\nBut I'm stubborn. Maybe too stubborn.\r\n\r\nThere's a longer story about my stubbornness and some questionable decisions (like reinventing wheels that didn't need reinventing), but I'll save that for the project breakdown. Let's just say I learned a lot about what *not* to do, even if I did it anyway.\r\n\r\n## What I Hope This Brings\r\n\r\nI've poured time and effort into this site—probably more than was strictly necessary. Late nights tweaking animations, restructuring content, refining the build system. All while wondering if anyone would even see it.\r\n\r\nBut I hope it pays off.\r\n\r\nPersonally, I hope it reminds me that I'm still capable. That even when things aren't going the way I planned, I can still create something I'm proud of. That my skills still have value, even if the job market hasn't validated that yet.\r\n\r\nProfessionally, I hope this shows potential employers (or clients, or collaborators) what I can do. Not just the technical skills—though those are here—but the drive, the problem-solving, the ability to ship something under constraints.\r\n\r\nThe return on investment might not be immediate. It might not even be measurable. But I have to believe that putting this work out there, being visible, sharing both the wins and the struggles—that all of this matters.\r\n\r\n## Why I Still Love This\r\n\r\nDespite the uncertainty, despite the frustration of job hunting, despite the self-doubt that creeps in at 2 AM—I still love building things.\r\n\r\nThis portfolio reminded me of that.\r\n\r\nThere's something satisfying about taking an idea and making it real. About solving problems, big and small. About seeing your vision come to life in a browser window.\r\n\r\nThat feeling is what keeps me going. It's what made me choose this career in the first place, and it's what I hope will carry me through to whatever comes next.\r\n\r\n## What's Next\r\n\r\nI don't know where this portfolio will take me. Maybe it'll land me a job. Maybe it'll lead to freelance work. Maybe it'll just be a nice thing I built that no one ever sees except me.\r\n\r\nBut I built it. And right now, in this moment, that's enough.\r\n\r\nIf you're reading this and you're in a similar place—unemployed, uncertain, maybe a little dejected—I hope this encourages you. Build something. It doesn't have to be perfect. It doesn't even have to be useful. Just build.\r\n\r\nBecause the act of creating, of making something from nothing, is its own reward. And sometimes, when things feel out of control, that's exactly what you need.\r\n\r\n---\r\n\r\n*If you want to know more about the technical side of this portfolio and the (questionable) decisions I made along the way, check out the project breakdown. Spoiler: I was way more stubborn than I should have been.*\r\n",
    "excerpt": "I'll be honest—this portfolio came out of necessity. But it also came from something deeper: the need to build, to create, to feel productive when everything else felt uncertain.",
    "assetsPath": "",
    "postPath": "content/blog/posts/building-this-portfolio/"
  },
  {
    "slug": "unemployed-to-saas-founder",
    "title": "From Unemployed to SaaS Founder: My Journey Begins",
    "date": "2024-10-05",
    "tags": [
      "entrepreneurship",
      "saas",
      "personal-story",
      "startup"
    ],
    "author": "Tian Pretorius",
    "image": "https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=800&h=500&fit=crop",
    "coverImage": "https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=800&h=500&fit=crop",
    "tldr": "Getting laid off after 6+ years led me to build my own SaaS product. I'm documenting the entire journey as a solo founder - from MVP to launch and beyond.",
    "content": "\r\n![Cover Image](https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=800&h=500&fit=crop)\r\n\r\n# From Unemployed to Solo SaaS Founder: The Beginning\r\n\r\nThe story of how I decided to build my own SaaS product after being laid off. This is the beginning of a journey filled with challenges, learning, and growth.\r\n\r\n## The Decision\r\n\r\nAfter 6+ years of building systems and leading teams, I found myself at a crossroads. Getting laid off was unexpected, but it gave me the freedom to pursue something I'd been thinking about for years: building my own product.\r\n\r\n## What I'm Building\r\n\r\nI'm working on a SaaS platform that solves a problem I've encountered repeatedly in my career. The goal is to launch an MVP within 3 months and start getting real users.\r\n\r\n![Alt text](./assets/image2.jpg)\r\n\r\n## The Challenge\r\n\r\nBuilding a SaaS product as a solo founder is challenging. You're not just a developer - you're also the designer, marketer, salesperson, and support team. But that's also what makes it exciting.\r\n\r\n## What's Next\r\n\r\nI'm documenting this entire journey - the wins, the failures, the lessons learned. Follow along as I build my SaaS from scratch, share my technical decisions, and hopefully inspire others to take the leap.\r\n\r\n## Key Takeaways\r\n\r\n- Sometimes losing your job can be the push you need\r\n- Building your own product is both scary and exciting\r\n- Documentation and sharing helps keep you accountable\r\n- The journey is just as important as the destination\r\n\r\nStay tuned for more updates!\r\n",
    "excerpt": "![Cover Image](https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=800&h=500&fit=crop)",
    "assetsPath": "content/blog/posts/unemployed-to-saas-founder/assets/",
    "postPath": "content/blog/posts/unemployed-to-saas-founder/"
  },
  {
    "slug": "building-scalable-systems",
    "title": "Building Scalable Systems: Lessons from 6+ Years",
    "date": "2024-09-28",
    "tags": [
      "architecture",
      "engineering",
      "best-practices",
      "scalability"
    ],
    "author": "Tian Pretorius",
    "image": "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=500&fit=crop",
    "coverImage": "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=500&fit=crop",
    "tldr": "Five essential lessons for building scalable systems: start simple, monitor everything, design databases carefully, automate early, and manage technical debt intentionally.",
    "content": "\r\n# Building Scalable Systems: Lessons from 6+ Years\r\n\r\n![Cover Image](https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=500&fit=crop)\r\n\r\nKey insights and lessons learned from building and scaling systems over 6+ years as a software engineer and CTO.\r\n\r\n## Lesson 1: Start Simple\r\n\r\nDon't over-engineer from day one. Build for your current scale, not your imagined future scale. I've seen too many projects fail because they tried to build for 10 million users when they had zero.\r\n\r\n### Why This Matters\r\n\r\n- Faster time to market\r\n- Less complexity to maintain\r\n- Easier to pivot when needed\r\n- Lower infrastructure costs\r\n\r\n## Lesson 2: Monitor Everything\r\n\r\nYou can't fix what you can't measure. Implement comprehensive monitoring from the start. Logging, metrics, alerts - they're not optional.\r\n\r\n### Essential Metrics\r\n\r\n- Response times\r\n- Error rates\r\n- Database performance\r\n- User activity\r\n- System resources\r\n\r\n## Lesson 3: Database Design Matters\r\n\r\nA poorly designed database will haunt you forever. Spend time upfront thinking about your data model and relationships. It's much harder to fix later.\r\n\r\n### Best Practices\r\n\r\n- Normalize when it makes sense\r\n- Use indexes wisely\r\n- Plan for growth\r\n- Document your schema\r\n- Regular backups are non-negotiable\r\n\r\n## Lesson 4: Automate Early\r\n\r\nCI/CD, automated testing, deployment scripts - automate everything you can. Your future self will thank you.\r\n\r\n### What to Automate\r\n\r\n- Testing (unit, integration, e2e)\r\n- Deployments\r\n- Database migrations\r\n- Backups\r\n- Security scans\r\n\r\n## Lesson 5: Technical Debt is Real\r\n\r\nEvery shortcut you take now is a loan you'll have to repay with interest. Sometimes it's necessary, but be intentional about it.\r\n\r\n### Managing Technical Debt\r\n\r\n- Document it when you create it\r\n- Prioritize paying it down\r\n- Don't let it accumulate\r\n- Balance features vs. refactoring\r\n\r\n## Conclusion\r\n\r\nBuilding scalable systems is as much about good practices as it is about technology choices. Focus on the fundamentals, and the scale will follow.\r\n",
    "excerpt": "![Cover Image](https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=500&fit=crop)",
    "assetsPath": "content/blog/posts/building-scalable-systems/assets/",
    "postPath": "content/blog/posts/building-scalable-systems/"
  },
  {
    "slug": "my-saas-tech-stack",
    "title": "My SaaS Tech Stack: Why I Chose These Technologies",
    "date": "2024-09-15",
    "tags": [
      "tech-stack",
      "tools",
      "saas",
      "development"
    ],
    "author": "Tian Pretorius",
    "image": "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?w=800&h=500&fit=crop",
    "coverImage": "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?w=800&h=500&fit=crop",
    "tldr": "React + TypeScript frontend, Node.js + Express backend, PostgreSQL + Redis for data, deployed on AWS with Docker. Choosing proven tech you know well beats learning everything from scratch.",
    "content": "\r\n# My SaaS Tech Stack: Why I Chose These Technologies\r\n\r\nA deep dive into the technology choices I made for building my SaaS product, and why each one matters.\r\n\r\n## Frontend: React + TypeScript\r\n\r\nI chose React with TypeScript for the frontend. Type safety is crucial for catching bugs early, and React's ecosystem is mature and well-supported.\r\n\r\n### Why React?\r\n\r\n- Component-based architecture\r\n- Huge ecosystem of libraries\r\n- Great developer experience\r\n- Strong community support\r\n- Excellent tooling\r\n\r\n### Why TypeScript?\r\n\r\n- Catches bugs at compile time\r\n- Better IDE support\r\n- Self-documenting code\r\n- Easier refactoring\r\n- Improved team collaboration\r\n\r\n## Backend: Node.js + Express\r\n\r\nNode.js with Express provides the flexibility I need while keeping the codebase in JavaScript/TypeScript. This allows for code sharing between frontend and backend.\r\n\r\n### Benefits\r\n\r\n- Same language across the stack\r\n- Fast and lightweight\r\n- Excellent for APIs\r\n- Great package ecosystem\r\n- Easy to scale horizontally\r\n\r\n## Database: PostgreSQL + Redis\r\n\r\nPostgreSQL for relational data because it's proven, reliable, and has excellent support for complex queries. Redis for caching and session management to keep things fast.\r\n\r\n### PostgreSQL Advantages\r\n\r\n- ACID compliance\r\n- Powerful query capabilities\r\n- JSON support\r\n- Excellent performance\r\n- Rock-solid reliability\r\n\r\n### Redis Use Cases\r\n\r\n- Session storage\r\n- Cache layer\r\n- Real-time features\r\n- Message queues\r\n- Rate limiting\r\n\r\n## Deployment: AWS + Docker\r\n\r\nContainerization with Docker makes deployments consistent and reliable. AWS provides all the infrastructure I need with great scaling capabilities.\r\n\r\n### AWS Services Used\r\n\r\n- EC2 for compute\r\n- RDS for PostgreSQL\r\n- ElastiCache for Redis\r\n- S3 for file storage\r\n- CloudFront for CDN\r\n- Route 53 for DNS\r\n\r\n### Docker Benefits\r\n\r\n- Consistent environments\r\n- Easy local development\r\n- Simplified deployments\r\n- Portable across providers\r\n- Better resource utilization\r\n\r\n## Development Tools\r\n\r\n### Version Control\r\n\r\n- Git + GitHub\r\n- Feature branch workflow\r\n- Pull request reviews\r\n- CI/CD integration\r\n\r\n### CI/CD\r\n\r\n- GitHub Actions\r\n- Automated testing\r\n- Automatic deployments\r\n- Environment management\r\n\r\n### Monitoring\r\n\r\n- Application logs\r\n- Performance metrics\r\n- Error tracking\r\n- User analytics\r\n- Uptime monitoring\r\n\r\n## Why These Choices?\r\n\r\nI chose technologies I know well and that have strong communities. When you're a solo founder, you don't have time to learn everything from scratch. Pick what you know and what works.\r\n\r\n### Key Principles\r\n\r\n- Use proven technology\r\n- Leverage your existing knowledge\r\n- Choose tools with good communities\r\n- Don't over-engineer\r\n- Prioritize developer experience\r\n\r\n## What I'd Do Differently\r\n\r\nLooking back, there are a few things I might change:\r\n\r\n- Consider serverless for some services\r\n- Use managed databases from the start\r\n- Invest more in monitoring early on\r\n- Set up better local development environment\r\n\r\n## Conclusion\r\n\r\nYour tech stack should enable you to move fast and build reliably. Choose what you know, but be willing to adapt as you grow.\r\n",
    "excerpt": "A deep dive into the technology choices I made for building my SaaS product, and why each one matters.",
    "assetsPath": "content/blog/posts/my-saas-tech-stack/assets/",
    "postPath": "content/blog/posts/my-saas-tech-stack/"
  }
]