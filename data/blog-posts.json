[
  {
    "slug": "3-building-this-portfolio",
    "title": "3. Building This Portfolio - A Labor of Love and Necessity",
    "date": "2025-10-09",
    "tags": [
      "personal",
      "career",
      "web-development"
    ],
    "author": "Tian Pretorius",
    "image": "https://images.unsplash.com/photo-1498050108023-c5249f4df085?w=1200&h=630&fit=crop",
    "coverImage": "https://images.unsplash.com/photo-1498050108023-c5249f4df085?w=1200&h=630&fit=crop",
    "tldr": "How building this portfolio gave me purpose during unemployment, taught me the value of constraint-driven design, and reminded me why I love creating things.",
    "content": "\r\n# Building This Portfolio - A Labor of Love and Necessity\r\n\r\nI'll be honest—this portfolio came out of necessity. But it also came from something deeper: the need to build, to create, to feel productive when everything else felt uncertain.\r\n\r\nThe past few months have been... well, let's just say they haven't been what I expected. After being unemployed for longer than I'd care to admit, I found myself in a strange limbo. No job offers coming through, no daily routine, no sense of forward momentum. It's easy to feel a bit dejected when you're in that space.\r\n\r\nBut here's what I've learned: when you're a builder at heart, you don't stop building just because the circumstances aren't ideal.\r\n\r\n## Why I Built This\r\n\r\nAt first, it was purely practical. I needed a portfolio. A place to showcase my work, share my thoughts, and hopefully catch the attention of someone who might want to hire me. The standard [LinkedIn](https://www.linkedin.com/in/tian-pretorius-817a2189/ \"LinkedIn - Tian Pretorius\") profile and [Resume](/assets/Tian-Pretorius-CV.pdf \"CV - Tian Pretorius\") just weren't cutting it—I needed something more, something that showed not just what I'd done, but who I am as an engineer.\r\n\r\nBut as I started working on it, something shifted. The act of building this site became more than just a job-hunting tool. It became a lifeline.\r\n\r\nWhen you're unemployed, it's easy to lose your sense of purpose. Days blend together. You start questioning your skills, your worth, your place in this industry. But when you're creating something—even something as simple as a personal website—you remember why you got into this field in the first place.\r\n\r\n**Building gives me purpose.** And right now, that's not abundant.\r\n\r\n## The Constraint That Shaped Everything\r\n\r\nHere's the thing about being unemployed: you don't have money for fancy hosting services. No AWS credits, no Vercel Pro, no fancy CDN. Every dollar counts.\r\n\r\nSo I went looking for free hosting options, and that's when I found [GitHub Pages](https://docs.github.com/en/pages \"GitHub Pages documentation\").\r\n\r\nIt was perfect—free, reliable, and git-based (which I already knew). But it came with its own quirks. [GitHub Pages](https://docs.github.com/en/pages \"GitHub Pages documentation\") is designed for static sites, and while that's great for performance, it meant I had to think differently about how I structured everything.\r\n\r\nNo backend. No database. Just HTML, CSS, JavaScript, and some markdown files.\r\n\r\nAnd you know what? That constraint was liberating.\r\n\r\nInstead of reaching for a framework or a CMS, I had to think about what I actually needed. Not what was trendy or what everyone else was using, but what would solve my specific problem with the resources I had.\r\n\r\n## The Ups and Downs\r\n\r\nWas it smooth sailing? Not exactly.\r\n\r\n[GitHub Pages](https://docs.github.com/en/pages \"GitHub Pages documentation\") has its quirks—deployment can be finicky, there are some limitations on how you can structure things, and the documentation assumes you know more than you might. I hit walls. I got frustrated. There were definitely moments where I wanted to just pay for hosting somewhere else and be done with it.\r\n\r\nBut I'm stubborn. Maybe too stubborn.\r\n\r\nThere's a longer story about my stubbornness and some questionable decisions (like reinventing wheels that didn't need reinventing), but I'll save that for the [project](projects.html?project=portfolio-website \"Portfolio Website with Markdown Content System\") breakdown. Let's just say I learned a lot about what *not* to do, even if I did it anyway.\r\n\r\n## What I Hope This Brings\r\n\r\nI've poured time and effort into this site—probably more than was strictly necessary. Late nights tweaking animations, restructuring content, refining the build system. All while wondering if anyone would even see it.\r\n\r\nBut I hope it pays off.\r\n\r\nPersonally, I hope it reminds me that I'm still capable. That even when things aren't going the way I planned, I can still create something I'm proud of. That my skills still have value, even if the job market hasn't validated that yet.\r\n\r\nProfessionally, I hope this shows potential employers (or clients, or collaborators) what I can do. Not just the technical skills—though those are here—but the drive, the problem-solving, the ability to ship something under constraints.\r\n\r\nThe return on investment might not be immediate. It might not even be measurable. But I have to believe that putting this work out there, being visible, sharing both the wins and the struggles—that all of this matters.\r\n\r\n## Why I Still Love This\r\n\r\nDespite the uncertainty, despite the frustration of job hunting, despite the self-doubt that creeps in at 2 AM—I still love building things.\r\n\r\nThis portfolio reminded me of that.\r\n\r\nThere's something satisfying about taking an idea and making it real. About solving problems, big and small. About seeing your vision come to life in a browser window.\r\n\r\nThat feeling is what keeps me going. It's what made me choose this career in the first place, and it's what I hope will carry me through to whatever comes next.\r\n\r\n## What's Next\r\n\r\nI don't know where this portfolio will take me. Maybe it'll land me a job. Maybe it'll lead to freelance work. Maybe it'll just be a nice thing I built that no one ever sees except me.\r\n\r\nBut I built it. And right now, in this moment, that's enough.\r\n\r\nIf you're reading this and you're in a similar place—unemployed, uncertain, maybe a little dejected—I hope this encourages you. Build something. It doesn't have to be perfect. It doesn't even have to be useful. Just build.\r\n\r\nBecause the act of creating, of making something from nothing, is its own reward. And sometimes, when things feel out of control, that's exactly what you need.\r\n\r\n---\r\n\r\n*If you want to know more about the technical side of this portfolio and the (questionable) decisions I made along the way, check out the [project](projects.html?project=portfolio-website \"Portfolio Website with Markdown Content System\") breakdown.*\r\n",
    "excerpt": "I'll be honest—this portfolio came out of necessity. But it also came from something deeper: the need to build, to create, to feel productive when everything else felt uncertain.",
    "assetsPath": "content/blog/posts/3-building-this-portfolio/assets/",
    "postPath": "content/blog/posts/3-building-this-portfolio/"
  },
  {
    "slug": "2-food-fortification-industry",
    "title": "2. My Time in the Food Fortification Industry",
    "date": "2025-10-08",
    "tags": [
      "engineering",
      "food-fortification",
      "systems",
      "public-health",
      "career"
    ],
    "author": "Tian Pretorius",
    "image": "content/blog/posts/2-food-fortification-industry/cover.jpg",
    "coverImage": "content/blog/posts/2-food-fortification-industry/cover.jpg",
    "tldr": "How I went from computer engineering to architecting systems for nutritional health, learning that meaningful engineering work can happen outside traditional tech—and that impact can be as simple as blending the right nutrients into maize meal.",
    "content": "\r\n# My Time in the Food Fortification Industry\r\n\r\nMost people think of engineering as circuits, code, or software—but for me, it became about vitamins, minerals, and ensuring that a child's porridge could actually improve their health. My time in the food fortification industry was where technology met nutrition, and where engineering met public health.\r\n\r\nIt wasn't the path I expected to take. But looking back, it taught me more about systems thinking, operational efficiency, and the real-world impact of good engineering than any traditional tech role could have.\r\n\r\n![Cover Image](./cover.jpg)\r\n\r\n## Getting into the Industry\r\n\r\nI entered the world of food fortification as a computer engineer, but quickly realized the role demanded more than just technical skills. It required understanding micronutrient chemistry, production processes, and regulatory frameworks—all while making complex operations run smoothly and efficiently.\r\n\r\nThe goal was clear: provide staple foods fortified with essential vitamins and minerals that meet strict health standards. The challenge? Doing it at scale, reliably, and cost-effectively.\r\n\r\nI was essentially tasked with building the digital infrastructure for an industry that lived at the intersection of food science, manufacturing, and public health. No pressure.\r\n\r\n## Building the Digital Backbone\r\n\r\nMy role was essentially about architecting the systems behind the business. I designed multi-layered spreadsheets and models that integrated sales, production, inventory, costs, and cash flow. These tools weren't static—they acted as real-time decision-support engines for the company.\r\n\r\nFrom calculating the cost of high-value nutrients like Vitamin A to planning production runs for dozens of client-specific blends, I ensured that every step of the operation was precise, compliant, and scalable. Every new client order automatically cascaded through the system, updating forecasts, stock levels, and financial projections.\r\n\r\nIt wasn't glamorous work. No one writes Medium articles about spreadsheet architecture. But it was critical. A single miscalculation could mean missed delivery dates, regulatory violations, or financial losses. The systems had to be bulletproof.\r\n\r\n### The Technical Challenge\r\n\r\nThe complexity came from the interconnectedness of everything:\r\n\r\n- **Sales forecasts** drove production schedules\r\n- **Production schedules** dictated raw material procurement\r\n- **Procurement timing** affected cash flow and inventory costs\r\n- **Inventory levels** constrained what orders we could accept\r\n- **Client-specific formulations** added layers of complexity to every calculation\r\n\r\nEverything was linked. Change one variable, and dozens of downstream processes needed to adjust automatically.\r\n\r\nI built models that could handle this complexity while remaining transparent enough for non-technical stakeholders to understand. It was a lesson in designing systems that were both powerful and accessible.\r\n\r\n## Bridging Tech and Nutrition\r\n\r\nWhat made the work exciting was the intersection of two worlds: technology and food science. My dual fluency allowed me to:\r\n\r\n- **Model production schedules and safety stock** for clients across Southern Africa\r\n- **Forecast cash flow and financial impact** of ingredient costs and regulatory requirements\r\n- **Translate technical data** into actionable insights for both production teams and executives\r\n\r\nThis meant that the decisions weren't just based on experience—they were data-driven, scenario-tested, and optimized for operational efficiency.\r\n\r\nI became the person who could sit in a meeting with food scientists discussing micronutrient stability, then turn around and explain to the finance team why our working capital requirements would spike next quarter. That bridge between technical and operational domains became my value proposition.\r\n\r\n## Operational and Strategic Impact\r\n\r\nBeyond the numbers, my systems had real-world effects:\r\n\r\n- **Optimized throughput**, minimized waste, and improved factory efficiency\r\n- **Reduced errors** and ensured consistent compliance with local and international regulations\r\n- **Enabled long-term planning**, investor-ready projections, and scalable growth strategies\r\n\r\nI became, in many ways, the digital backbone of the business, ensuring that every process—from sourcing and blending to distribution and financial planning—ran smoothly and could scale with growing demand.\r\n\r\nThe most rewarding part? Seeing the tangible outcomes. When our systems worked correctly, it meant:\r\n\r\n- Healthier food reaching communities that needed it\r\n- Consistent quality that met strict regulatory standards\r\n- A sustainable business model that could continue serving public health goals\r\n\r\nThat's the kind of engineering impact that doesn't always come through in traditional software roles. You're not optimizing ad clicks or increasing user engagement metrics—you're helping ensure children get the nutrition they need.\r\n\r\n## Lessons Learned\r\n\r\nMy time in the food fortification industry taught me several key lessons:\r\n\r\n### 1. Engineering Can Have Direct, Tangible Impacts on Public Health\r\n\r\nEvery formula, forecast, and process I designed contributed to healthier meals and stronger communities. It's proof that meaningful engineering work often happens outside the Silicon Valley narrative of disruption and scale.\r\n\r\n### 2. Complex Industries Require Bridge Builders\r\n\r\nSuccess isn't just about technical depth—it's about understanding the full context. Production constraints. Regulatory requirements. Market dynamics. Financial realities. The best solutions come from people who can navigate all of these domains simultaneously.\r\n\r\n### 3. Automation, Data Integrity, and Scenario Planning Are Essential\r\n\r\nIn industries where mistakes have real consequences—health, compliance, financial—there's no room for manual processes or gut-feel decisions. Systems need to be robust, transparent, and designed for reliability over cleverness.\r\n\r\n### 4. Sometimes the Best Tool Is the Simplest One\r\n\r\nI could have pushed for custom software, databases, APIs. Instead, I built sophisticated systems using tools people already knew—spreadsheets, with formulas and logic that anyone could audit. It wasn't sexy, but it was maintainable and it worked.\r\n\r\n## Reflecting on the Experience\r\n\r\nLooking back, my time in this industry was unconventional but incredibly rewarding. I started as a computer engineer and became a systems architect for nutrition. From spreadsheets to strategy, I learned that engineering isn't just about building things—it's about building systems that improve lives.\r\n\r\nIt taught me to think beyond the code. To consider the human impact of every technical decision. To design for reliability, compliance, and sustainability—not just features and functionality.\r\n\r\nAnd most importantly, it showed me that the most meaningful engineering work often happens in places you'd never expect. Not in startups chasing the next big thing, but in industries quietly solving real problems for real people.\r\n\r\n## Where This Took Me\r\n\r\nMy experience in food fortification shaped how I approach every engineering challenge:\r\n\r\n- I design systems with **operational reality** in mind, not just technical elegance\r\n- I focus on **maintainability** and **transparency** as much as functionality\r\n- I understand that **impact matters more than innovation** for its own sake\r\n- I've learned to bridge **technical depth** with **strategic thinking**\r\n\r\nThese aren't lessons you get from bootcamps or online courses. They come from working in industries where engineering decisions have consequences beyond user metrics and revenue targets.\r\n\r\n---\r\n\r\n*This experience reinforced what I already knew deep down: I'm motivated by building systems that solve real problems. Whether it's optimizing nutrient blends or architecting software platforms, the challenge is the same—create something reliable, scalable, and impactful. If you're working on something in that space, I'd love to [connect](../../../contact.html \"Get in Touch\").*\r\n",
    "excerpt": "Most people think of engineering as circuits, code, or software—but for me, it became about vitamins, minerals, and ensuring that a child's porridge could actually improve their health. My time in the...",
    "assetsPath": "content/blog/posts/2-food-fortification-industry/assets/",
    "postPath": "content/blog/posts/2-food-fortification-industry/"
  },
  {
    "slug": "1-particle-detection-rd",
    "title": "1. Building Vision from Light: My Journey in Particle Detection R&D",
    "date": "2025-10-07",
    "tags": [
      "computer-vision",
      "research",
      "optics",
      "image-processing",
      "engineering"
    ],
    "author": "Tian Pretorius",
    "image": "content/blog/posts/1-particle-detection-rd/cover.jpg",
    "coverImage": "content/blog/posts/1-particle-detection-rd/cover.jpg",
    "tldr": "How I built a computer vision system to detect microscopic Vitamin A particles using fluorescence imaging—and what I learned when physics pushed back against the solution.",
    "content": "\r\n# Building Vision from Light: My Journey in Particle Detection R&D\r\n\r\nWhen I first joined the research team, I didn't expect my work to involve sugar. I was a computer and electronics engineer — my world was circuits, software, sensors, and algorithms — not microscopes and particle samples. But the challenge that landed on my desk was too fascinating to ignore:\r\n\r\n**Could we build a system that could see something invisible?**\r\n\r\nSpecifically, could we use cameras and light to detect Vitamin A particles in fortified foods — the kind added to everyday products like sugar and flour to combat micronutrient deficiencies? It was a bold idea: replace slow, liquid chemical testing with a small optical device and some clever software.\r\n\r\nThat was the beginning of a long, winding journey — part science experiment, part engineering adventure — that taught me more about problem-solving, persistence, and physics than any project before it.\r\n\r\n![Cover Image](./cover.jpg)\r\n\r\n---\r\n\r\n## The Challenge: Seeing What Isn't There\r\n\r\nThe premise was simple: Fortified foods contain tiny Vitamin A compounds, suspended in a uniform mixture. In theory, under specific wavelengths, you can excite these compounds with light, causing them to re-emit energy as fluorescence from their conjugated double bonds. A camera could capture that glow and analyze it to detect—and even quantify, using advanced statistical models—the Vitamin A concentration. Instantly. Without a laboratory.\r\n\r\nBut theory is the easy part.\r\n\r\nIn practice, we were trying to extract meaningful data from noise, light scatter, and materials that were anything but consistent. It was a perfect storm — a problem that sat right between software, optics, and human nutrition.\r\n\r\nMy task: Make the software brain that tied it all together.\r\n\r\n---\r\n\r\n## Stage 1: Building Vision from Light\r\n\r\nThe first hurdle was **calibration**. When identifying faint fluorescent signals, lighting becomes everything. A single flicker, a slight color imbalance, or even ambient room light could throw off the entire reading.\r\n\r\nI designed a dynamic calibration module to stabilize the imaging process. It handled:\r\n\r\n- **White balance normalization**, ensuring that every image started from a neutral baseline\r\n- **Gamma correction**, to compensate for uneven light intensity across the sample\r\n- **Hue–saturation–value (HSV) conversion**, which made it easier to isolate spectral components of interest — far more robust than working in raw RGB\r\n\r\nOnce the lighting was under control, I implemented a **background subtraction layer**, using rolling averages of sample frames to remove residual reflections from sugar crystals. It wasn't glamorous, but that small adjustment made a world of difference in accuracy.\r\n\r\nEvery captured image passed through this preprocessing stage before moving into the detection pipeline. In essence, we taught the system how to \"see\" the scene under identical conditions every time — as if it were working in a perfectly lit lab, even when it wasn't.\r\n\r\n---\r\n\r\n## Stage 2: Detecting the Signal\r\n\r\nAfter calibration came the real test: **identifying the Vitamin A particles themselves**.\r\n\r\nUnder the right wavelength, they emitted a faint, consistent glow — so faint that it often blurred into the crystalline structure around it. My job was to write algorithms capable of teasing that glow out of the chaos.\r\n\r\n### Adaptive Thresholding\r\n\r\nThe pipeline I built used several layers of adaptive thresholding. Instead of relying on fixed brightness cutoffs, it calculated dynamic thresholds based on histogram peaks — essentially letting each image decide for itself what \"bright\" and \"dark\" meant. This was crucial because samples varied so much between tests.\r\n\r\n### Morphological Operations\r\n\r\nOnce potential particles were highlighted, the software performed **morphological operations** — small mathematical filters that erode noise, smooth edges, and connect broken shapes. I used a combination of erosion–dilation cycles, tuned kernel sizes, and region labeling to isolate true signals.\r\n\r\n### Statistical Classification\r\n\r\nEach candidate region then passed through a rule-based classifier that measured:\r\n\r\n- Mean and peak intensity\r\n- Size and circularity ratios\r\n- Variance across color channels\r\n\r\nIf a region matched the statistical profile of known Vitamin A fluorescence, it was logged as a detection event.\r\n\r\nFrom there, I built a **statistical aggregation model** that counted and normalized detections per surface area, creating a rough concentration map. The result wasn't just a yes/no flag — it was a quantified estimate, something that could later feed into compliance reporting or batch-level analysis.\r\n\r\nFor the first time, the system was turning pixels into chemistry.\r\n\r\n---\r\n\r\n## Stage 3: Reality Checks and Limits\r\n\r\nAfter months of development and dozens of sample batches, the prototype was finally ready for testing. We ran it on fortified sugar samples with known concentrations of Vitamin A, comparing its readings against standard laboratory results.\r\n\r\nThe early runs were thrilling. The software picked up clear fluorescence on high-dose samples, the data lined up beautifully, and the whole workflow felt like it was finally clicking.\r\n\r\nThen we started testing standard, real-world fortification levels — and that's when **physics pushed back**.\r\n\r\n### The Hard Truth\r\n\r\nVitamin A exists in such tiny quantities in properly fortified food that the fluorescent signal becomes vanishingly small — buried beneath layers of optical scatter and noise. Even the best algorithms in the world can't amplify what isn't measurable in the first place.\r\n\r\nThrough analysis, I calculated that to achieve a statistically significant reading, the imaging surface would need to be **roughly sixty-four times larger** (the size of your typical bedroom) than our test bed (essentially the size of a tabletop scanner). At that scale, the idea of a small, portable device no longer made sense.\r\n\r\nIt was a sobering but valuable moment. We hadn't built a failed system — we had built a working system that revealed the true physical limits of the problem.\r\n\r\n---\r\n\r\n## Stage 4: Lessons in Engineering and Curiosity\r\n\r\nThat realization changed how I think about engineering. In software, you often assume that enough optimization or computing power can eventually solve a problem. In physical systems, that's not always true. **Sometimes nature draws a hard boundary** — and your job is to find out where it is.\r\n\r\n### Transferable Innovation\r\n\r\nYet, the project was anything but a dead end. The algorithms we developed had broader applications: particle detection, fluorescence imaging, and adaptive segmentation — all transferable to other scientific and industrial uses. More importantly, the work demonstrated the value of bringing computational thinking into fields that traditionally rely on laboratory science.\r\n\r\n### Engineering as Translation\r\n\r\nI started to see engineering not just as a way to build tools, but as a **language** — one that can translate between disciplines. The same methods I used to detect Vitamin A could just as easily be used to:\r\n\r\n- Track impurities in manufacturing\r\n- Study fluorescence in biology\r\n- Enhance visual analysis in environmental monitoring\r\n\r\n### The Value of Understanding\r\n\r\nThe project also taught me a more personal lesson: that **curiosity is a valid outcome in itself**. We didn't walk away with a market-ready solution, but we walked away with understanding — the kind that reshapes how you approach every problem after it.\r\n\r\n---\r\n\r\n## Looking Back\r\n\r\nWhen I think about that time now, I remember the small victories: the first clean detection map after a week of noisy outputs, the moment the segmentation pipeline finally separated particles accurately, the first time the system ran end-to-end without manual tuning. Those little breakthroughs made the long nights worth it.\r\n\r\nIt was, in many ways, **pure engineering** — a blend of code, physics, and persistence chasing a question that didn't have an easy answer.\r\n\r\nWorking on particle detection taught me patience, precision, and respect for the limits of measurement. It also reminded me that innovation doesn't always mean producing a finished product — sometimes it means mapping the edges of what's possible so that others can push beyond them.\r\n\r\n### What I Took Away\r\n\r\nIn the end, the journey mattered more than the outcome. I started out trying to make a machine see Vitamin A, but what I really learned was how to see the invisible connections between disciplines — how engineering, light, and biology can meet in unexpected ways.\r\n\r\nThat's what R&D really is at its best: **an exploration of the boundaries between what we know and what we can still discover**.\r\n\r\n---\r\n\r\n*This project bridged computer vision, optics, and nutritional science — a reminder that the most interesting engineering problems rarely fit into a single discipline.*\r\n",
    "excerpt": "When I first joined the research team, I didn't expect my work to involve sugar. I was a computer and electronics engineer — my world was circuits, software, sensors, and algorithms — not microscopes ...",
    "assetsPath": "content/blog/posts/1-particle-detection-rd/assets/",
    "postPath": "content/blog/posts/1-particle-detection-rd/"
  }
]