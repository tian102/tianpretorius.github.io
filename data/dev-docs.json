[
  {
    "slug": "CONTENT_MANAGEMENT",
    "title": "Content Management System Documentation",
    "content": "# Content Management System Documentation\n\n## Overview\nThis portfolio now features a centralized content management system that allows you to edit all site text from a single JSON file instead of editing individual HTML files.\n\n## Architecture\n\n### Files Structure\n```\ndata/\n├── site-content.json       # Main content configuration (ALL SITE TEXT)\n├── blog-posts.json         # Generated blog posts data\n└── projects.json           # Generated projects data\n\njs/\n├── content-loader.js       # Content loading utility\n├── index.js                # Homepage functionality\n├── blog.js                 # Blog page functionality\n├── projects.js             # Projects page functionality\n└── main.js                 # Site-wide navigation & effects\n```\n\n## How It Works\n\n### 1. Content Storage (`data/site-content.json`)\nAll static site content is stored in a structured JSON file with the following sections:\n\n- **personal**: Your personal information (name, email, social links, resume)\n- **hero**: Homepage hero section content\n- **about**: About page sections, skills, experience, and sidebar\n- **projects**: Projects page header content\n- **blog**: Blog page header content\n- **contact**: Contact page content and methods\n- **footer**: Footer content and links\n\n### 2. Content Loader (`js/content-loader.js`)\nA JavaScript utility that provides:\n\n- `ContentLoader.load()` - Load site content from JSON\n- `ContentLoader.get(path)` - Get content by dot-notation path (e.g., 'hero.greeting')\n- `ContentLoader.populate(elementId, contentPath)` - Populate single element\n- `ContentLoader.populateMultiple(mappings)` - Populate multiple elements at once\n- `ContentLoader.renderAboutSections(containerId)` - Render about page sections\n- `ContentLoader.renderHomeSkills(containerId)` - Render collapsible skills categories (homepage)\n- `ContentLoader.renderSkills(containerId)` - Render skills tags (about page sidebar)\n- `ContentLoader.renderExperience(containerId)` - Render experience items\n- `ContentLoader.renderContactMethods(containerId)` - Render contact methods\n- `ContentLoader.renderFooter(containerId)` - Render footer content\n- `ContentLoader.initHeroTypedText()` - Initialize typing animation with roles\n\n### 3. Page Integration\nEach HTML page includes:\n1. IDs on content elements (e.g., `id=\"hero-description\"`)\n2. Content loader script: `<script src=\"js/content-loader.js?v=VERSION\"></script>`\n3. Initialization code to load and populate content\n\n**Note**: Cache versioning (e.g., `?v=20251009-59`) is used to ensure browsers load the latest version of CSS/JS files after updates.\n\n## Editing Content\n\n### Step-by-Step Guide\n\n1. **Open** `data/site-content.json` in your editor\n2. **Find** the section you want to edit (personal, hero, about, etc.)\n3. **Edit** the text values\n4. **Save** the file\n5. **Refresh** your browser - changes appear immediately!\n\n### Example: Changing Hero Section\n\n```json\n{\n  \"hero\": {\n    \"greeting\": \"Hi, I'm\",\n    \"name\": \"Tian Pretorius\",\n    \"typedRoles\": [\n      \"Software Engineer\",\n      \"Full-Stack Developer\",\n      \"SaaS Founder\"\n    ],\n    \"description\": \"Your new description here...\",\n    \"cta\": {\n      \"primary\": \"About Me\",\n      \"secondary\": \"Get In Touch\"\n    }\n  }\n}\n```\n\n### Example: Adding a New Skill Category (Homepage)\n\nIn the `homepage.skills.categories` array:\n```json\n{\n  \"homepage\": {\n    \"skills\": {\n      \"categories\": [\n        {\n          \"name\": \"Frontend\",\n          \"tags\": [\"React\", \"Vue.js\", \"TypeScript\"]\n        },\n        {\n          \"name\": \"Your New Category\",  // ← Add new category\n          \"tags\": [\"Tool 1\", \"Tool 2\", \"Tool 3\"]\n        }\n      ]\n    }\n  }\n}\n```\n\nOr add to existing category's tags array:\n```json\n{\n  \"name\": \"Frontend\",\n  \"tags\": [\"React\", \"Vue.js\", \"TypeScript\", \"Your New Skill\"]  // ← Add here\n}\n```\n\n### Example: Updating Contact Methods\n\n```json\n{\n  \"contact\": {\n    \"methods\": [\n      {\n        \"icon\": \"✉️\",\n        \"title\": \"Email\",\n        \"value\": \"newemail@example.com\",\n        \"link\": \"mailto:newemail@example.com\"\n      }\n    ]\n  }\n}\n```\n\n## Pages Using Content Loader\n\n### index.html\n- Hero section (greeting, name, description, CTAs)\n- Hero typed text animation\n- About section with collapsible skill categories\n- Featured projects and blog posts\n- Contact preview\n- Footer\n\n### about.html\n- Page title and tagline\n- About sections (Who I Am, What I Do, My Journey)\n- Skills tags\n- Experience items\n- Current focus\n- Footer\n\n### contact.html\n- Page title and tagline\n- Intro paragraph\n- Contact methods (Email, LinkedIn, GitHub)\n- Footer\n\n### blog.html\n- Page title and tagline\n- Blog post listings with filtering and search\n- Individual post pages with TOC sidebar\n- Footer\n\n### projects.html\n- Page title and tagline\n- Project listings with filtering\n- Individual project pages with TOC sidebar\n- Footer\n\n## Benefits\n\n### ✅ Centralized Content\n- All text in one file\n- Easy to find and edit\n- Single source of truth\n\n### ✅ No HTML Editing Required\n- Edit JSON instead of HTML\n- Less prone to breaking layout\n- Cleaner separation of content and structure\n\n### ✅ Consistent Across Pages\n- Reuse content (e.g., footer on all pages)\n- Update once, changes everywhere\n- Maintains consistency\n\n### ✅ Easy Maintenance\n- Quick content updates\n- No need to understand HTML structure\n- Version control friendly\n\n### ✅ Enhanced User Experience\n- Collapsible skill categories keep content organized\n- TOC sidebar for easy navigation on long posts\n- Smooth animations and transitions\n- Responsive design across all devices\n\n## Build & Deploy Process\n\n### Development Workflow\n1. Edit content in `data/site-content.json`\n2. Refresh browser to see changes immediately\n3. No build step required for content changes\n\n### Blog & Projects Workflow\n1. Edit markdown files in `blog/posts/*.md` or `projects/posts/*.md`\n2. Run `npm run build` to generate JSON\n3. Or let GitHub Actions auto-build on push\n\n### Deployment\n1. Commit changes to git\n2. Push to GitHub\n3. GitHub Actions automatically:\n   - Builds blog/projects JSON\n   - Deploys to GitHub Pages\n\n## Content Structure Reference\n\n### Personal Information\n```json\n\"personal\": {\n  \"name\": \"Your Name\",\n  \"title\": \"Your Title\",\n  \"email\": \"your@email.com\",\n  \"social\": {\n    \"github\": \"https://github.com/username\",\n    \"linkedin\": \"https://linkedin.com/in/username\"\n  },\n  \"resume\": \"assets/Your-Resume.pdf\"\n}\n```\n\n### Hero Section\n```json\n\"hero\": {\n  \"greeting\": \"Hi, I'm\",\n  \"name\": \"Your Name\",\n  \"typedRoles\": [\"Role 1\", \"Role 2\", \"Role 3\"],\n  \"description\": \"Your description...\",\n  \"cta\": {\n    \"primary\": \"Button 1 Text\",\n    \"secondary\": \"Button 2 Text\"\n  }\n}\n```\n\n### About Sections\n```json\n\"about\": {\n  \"pageTitle\": \"About Me\",\n  \"pageTagline\": \"Your tagline\",\n  \"sections\": [\n    {\n      \"title\": \"Section Title\",\n      \"content\": [\"Paragraph 1\", \"Paragraph 2\"]\n    },\n    {\n      \"title\": \"What I Do\",\n      \"intro\": \"Intro paragraph\",\n      \"list\": [\"Item 1\", \"Item 2\", \"Item 3\"]\n    }\n  ]\n}\n```\n\n### Homepage Skills (Collapsible Categories)\n```json\n\"homepage\": {\n  \"skills\": {\n    \"title\": \"Skills & Technologies\",\n    \"categories\": [\n      {\n        \"name\": \"Frontend\",\n        \"tags\": [\"React\", \"Vue.js\", \"TypeScript\"]\n      },\n      {\n        \"name\": \"Backend\",\n        \"tags\": [\"Node.js\", \"Python\", \"PostgreSQL\"]\n      }\n    ]\n  }\n}\n```\n\n### Sidebar Content (About Page)\n```json\n\"sidebar\": {\n  \"skills\": {\n    \"title\": \"Skills & Technologies\",\n    \"tags\": [\"Skill 1\", \"Skill 2\"]\n  },\n  \"experience\": {\n    \"title\": \"Experience\",\n    \"items\": [\n      {\n        \"title\": \"Job Title\",\n        \"duration\": \"Years\",\n        \"description\": \"Description\"\n      }\n    ]\n  },\n  \"currentFocus\": {\n    \"title\": \"Current Focus\",\n    \"intro\": \"Brief intro text\",\n    \"list\": [\"Focus Area 1\", \"Focus Area 2\"]\n  }\n}\n```\n\n### Contact Methods\n```json\n\"contact\": {\n  \"pageTitle\": \"Get In Touch\",\n  \"pageTagline\": \"Tagline\",\n  \"intro\": \"Intro paragraph\",\n  \"methods\": [\n    {\n      \"icon\": \"✉️\",\n      \"title\": \"Email\",\n      \"value\": \"your@email.com\",\n      \"link\": \"mailto:your@email.com\"\n    }\n  ]\n}\n```\n\n### Footer\n```json\n\"footer\": {\n  \"copyright\": \"© 2025 Your Name. Built with...\",\n  \"links\": [\n    {\n      \"text\": \"GitHub\",\n      \"url\": \"https://github.com/username\"\n    }\n  ]\n}\n```\n\n## Troubleshooting\n\n### Content Not Updating\n1. Check browser console for errors (F12)\n2. Verify JSON syntax is valid (use JSONLint.com)\n3. Clear browser cache (Ctrl+F5)\n4. Check element IDs match between HTML and loader code\n\n### Footer Not Showing\n- Ensure container has `id=\"footer-container\"`\n- Check `ContentLoader.renderFooter('footer-container')` is called\n- Verify footer data exists in `site-content.json`\n\n### Skills/Experience Not Rendering\n- Check array structure in JSON\n- Verify container IDs are correct\n- Check browser console for errors\n\n### Typed Text Not Working\n- Ensure `typedRoles` array is not empty\n- Check element has class `typed-text`\n- Verify `ContentLoader.initHeroTypedText()` is called\n\n### Collapsible Elements Not Working\n- Check that details/summary structure is correct in HTML\n- Verify CSS includes transitions and chevron rotation\n- Clear browser cache (Ctrl+Shift+R or Cmd+Shift+R)\n- Check browser console for JavaScript errors\n\n## Technical Details\n\n### Content Loading Flow\n1. Page loads → `DOMContentLoaded` event fires\n2. `ContentLoader.load()` fetches `data/site-content.json`\n3. Content is cached in memory\n4. `ContentLoader.populate()` or render functions update DOM\n5. Page displays with dynamic content\n\n### Path Resolution\nThe content loader uses dot-notation paths:\n- `\"hero.greeting\"` → `siteContent.hero.greeting`\n- `\"about.sections\"` → `siteContent.about.sections`\n- `\"footer.links\"` → `siteContent.footer.links`\n\n### Caching\nContent is loaded once and cached. Subsequent calls to `ContentLoader.get()` use the cached data.\n\n## Best Practices\n\n### ✅ DO\n- Use consistent formatting in JSON\n- Test changes locally before deploying\n- Keep backups of `site-content.json`\n- Use descriptive content values\n- Commit changes to git regularly\n\n### ❌ DON'T\n- Don't include HTML in JSON content (use plain text)\n- Don't delete keys from JSON (set to empty string if needed)\n- Don't edit generated JSON files (`blog-posts.json`, `projects.json`)\n- Don't remove element IDs from HTML pages\n\n## UI Features\n\n### Table of Contents (TOC)\nBlog and project detail pages automatically generate a navigable table of contents:\n\n- **Auto-generation**: Parses H2 and H3 headings from markdown content\n- **Nested Structure**: H3 headings grouped under parent H2s\n- **Collapsible**: TOC and H2 sections can be expanded/collapsed\n- **Sticky Positioning**: Follows scroll, stays below navbar\n- **Active Highlighting**: Current section highlighted during scroll\n- **Smooth Navigation**: Clicking TOC links scrolls smoothly to sections\n\n### Collapsible Skills Categories (Homepage)\nThe About section on the homepage displays skills in collapsible categories:\n\n- **Card Design**: Each category is a styled card with border and hover effects\n- **Collapsed by Default**: Categories start collapsed for clean appearance\n- **Chevron Icons**: Visual indicator of expand/collapse state (rotates 180°)\n- **Smooth Animations**: CSS transitions for opening/closing\n- **Category Organization**: Skills grouped logically (Frontend, Backend, etc.)\n\n## Future Enhancements\n\nPotential improvements to the content management system:\n\n1. **Visual Editor**: Web-based interface for editing content\n2. **Content Validation**: JSON schema validation\n3. **Preview Mode**: See changes before saving\n4. **Multi-language Support**: Internationalization\n5. **Content Versioning**: Track content changes over time\n6. **Media Management**: Images and assets in JSON\n7. **Content Search**: Find content across all sections\n8. **Import/Export**: Backup and restore content\n9. **TOC Enhancements**: Search functionality, bookmark support\n10. **Dark Mode Improvements**: Enhanced theme consistency\n\n## Summary\n\nThe content management system provides a clean, maintainable way to manage all site text from a single JSON file. This architecture:\n\n- **Separates content from structure** (JSON vs HTML)\n- **Simplifies updates** (edit one file instead of many)\n- **Maintains consistency** (reusable content components)\n- **Improves workflow** (no HTML knowledge required for content changes)\n\nSimply edit `data/site-content.json`, save, and refresh your browser to see changes!\n",
    "excerpt": "This portfolio now features a centralized content management system that allows you to edit all site text from a single JSON file instead of editing individual HTML files.",
    "filename": "CONTENT_MANAGEMENT.md"
  },
  {
    "slug": "MODULAR-STRUCTURE",
    "title": "Modular Blog and Project Structure",
    "content": "# Modular Blog and Project Structure\n\n## Overview\n\nYour blog posts and projects now use a **modular directory structure** where each post/project has its own folder containing all related assets (images, files, etc.).\n\n## Directory Structure\n\n### Blog Posts\n\n```\ncontent/blog/\n├── posts/\n│   ├── your-post-slug/\n│   │   ├── index.md          # Post content with frontmatter\n│   │   ├── cover.jpg         # Optional cover image\n│   │   └── assets/           # Additional images/files\n│   │       ├── screenshot.jpg\n│   │       └── diagram.png\n│   ├── another-post/\n│   │   ├── index.md\n│   │   └── assets/\n│   └── ...\n└── template/\n    ├── index.md              # Template for new posts\n    └── assets/\n```\n\n### Projects\n\n```\ncontent/projects/\n├── posts/\n│   ├── your-project-slug/\n│   │   ├── index.md          # Project description\n│   │   ├── cover.jpg         # Main project image\n│   │   └── assets/           # Screenshots, diagrams, etc.\n│   │       ├── screenshot1.jpg\n│   │       ├── demo.gif\n│   │       └── architecture.svg\n│   ├── another-project/\n│   │   ├── index.md\n│   │   └── assets/\n│   └── ...\n└── template/\n    ├── index.md              # Template for new projects\n    └── assets/\n```\n\n## Creating New Content\n\n### Creating a New Blog Post\n\n1. **Create a new directory** in `content/blog/posts/`:\n   ```bash\n   mkdir content/blog/posts/my-new-post\n   mkdir content/blog/posts/my-new-post/assets\n   ```\n\n2. **Copy the template**:\n   ```bash\n   cp content/blog/template/index.md content/blog/posts/my-new-post/index.md\n   ```\n\n3. **Add your content** to `index.md`:\n   - Update the frontmatter (title, date, tags, tldr, etc.)\n   - Write your post content\n   - Add a cover image if desired (coverImage: cover.jpg)\n\n4. **Add images**:\n   - Place your cover image in the post directory: `my-new-post/cover.jpg`\n   - Place additional images in: `my-new-post/assets/`\n\n5. **Reference images** using relative paths:\n   ```markdown\n   ![Cover](./cover.jpg)\n   ![Screenshot](./assets/screenshot.jpg)\n   ```\n\n6. **Build and test**:\n   ```bash\n   node scripts/build-content.js\n   ```\n\n### Creating a New Project\n\n1. **Create a new directory** in `content/projects/posts/`:\n   ```bash\n   mkdir content/projects/posts/my-new-project\n   mkdir content/projects/posts/my-new-project/assets\n   ```\n\n2. **Copy the template**:\n   ```bash\n   cp content/projects/template/index.md content/projects/posts/my-new-project/index.md\n   ```\n\n3. **Add your content** to `index.md`:\n   - Update the frontmatter (title, description, tags, demo, github, etc.)\n   - Write your project description\n   - Add a cover image (coverImage: cover.jpg)\n\n4. **Add images and assets**:\n   - Main image: `my-new-project/cover.jpg`\n   - Screenshots, demos: `my-new-project/assets/`\n\n5. **Reference images** using relative paths:\n   ```markdown\n   ![Project Screenshot](./cover.jpg)\n   ![Feature Demo](./assets/demo.gif)\n   ```\n\n6. **Build and test**:\n   ```bash\n   node scripts/build-content.js\n   ```\n\n## Frontmatter Reference\n\n### Blog Post Frontmatter\n\n```yaml\n---\ntitle: Your Post Title\ndate: 2024-01-01\ntags: tag1, tag2, tag3\nauthor: Tian Pretorius\ntldr: A brief 1-2 sentence summary\ncoverImage: cover.jpg          # Optional, relative to post directory\n---\n```\n\n### Project Frontmatter\n\n```yaml\n---\ntitle: Your Project Name\ndescription: One-sentence description\ntags: [tech1, tech2, tech3]\ndemo: https://demo-url.com\ngithub: https://github.com/user/repo\ncoverImage: cover.jpg          # Optional, relative to project directory\nimage: cover.jpg               # Fallback for older code\ndate: 2024-01-01\n---\n```\n\n## Image Best Practices\n\n1. **Naming**:\n   - Use descriptive names: `dashboard-screenshot.jpg` not `img1.jpg`\n   - Use lowercase with hyphens: `feature-demo.gif`\n\n2. **Optimization**:\n   - Compress images before adding them\n   - Resize to appropriate dimensions (max 1920px wide)\n   - Use appropriate formats (JPG for photos, PNG for screenshots, SVG for diagrams)\n\n3. **Organization**:\n   - Cover images go in the post/project root\n   - Additional images go in the `assets/` subdirectory\n   - Keep related images together\n\n4. **References**:\n   - Always use relative paths: `./cover.jpg` or `./assets/image.jpg`\n   - Never use absolute paths or external URLs for local images\n\n## Build Process\n\nThe build script (`scripts/build-content.js`) automatically:\n- Scans for directories in `content/blog/posts/` and `content/projects/posts/`\n- Reads `index.md` from each directory\n- Parses frontmatter and extracts metadata\n- Generates `data/blog-posts.json` and `data/projects.json`\n- Includes asset paths in the generated JSON\n- Preserves markdown content for rendering on detail pages\n\n**Run the build**:\n```bash\nnpm run build\n# or\nnode scripts/build-content.js\n```\n\n**What happens after build**:\n1. JSON files created in `data/` directory\n2. Blog and project pages read from JSON\n3. Individual post/project pages render markdown as HTML\n4. Table of contents automatically generated from H2/H3 headings\n\n## Migration\n\nIf you need to migrate old posts/projects:\n\n1. **Blog posts**:\n   ```bash\n   node scripts/migrate-blog-to-modular.js\n   ```\n\n2. **Projects**:\n   ```bash\n   node scripts/migrate-projects-to-modular.js\n   ```\n\nBackups are created automatically in:\n- `blog/posts-backup/`\n- `projects/posts-backup/`\n\n## Enhanced Features\n\n### Table of Contents (TOC)\nWhen you view individual blog posts or projects, a table of contents is automatically generated:\n\n- **Auto-generated**: Parses H2 and H3 headings from your markdown\n- **Collapsible**: Main TOC and H2 sections can be expanded/collapsed\n- **Nested Structure**: H3 headings appear under their parent H2s\n- **Sticky Navigation**: TOC follows you as you scroll\n- **Active Highlighting**: Current section is highlighted\n- **Click to Navigate**: Click any heading to jump to that section\n\n**How it works**:\n1. Write markdown with H2 (`##`) and H3 (`###`) headings\n2. Build script converts markdown to HTML\n3. JavaScript extracts headings and generates TOC\n4. TOC appears on the page automatically\n\n**Example markdown structure**:\n```markdown\n## Main Section 1\nContent here...\n\n### Subsection 1.1\nMore content...\n\n### Subsection 1.2\nEven more content...\n\n## Main Section 2\nDifferent content...\n\n### Subsection 2.1\nFinal content...\n```\n\nThis creates a TOC like:\n- Main Section 1 (collapsible)\n  - Subsection 1.1\n  - Subsection 1.2\n- Main Section 2 (collapsible)\n  - Subsection 2.1\n\n## Benefits of Modular Structure\n\n✅ **Self-contained**: Each post/project has all its assets in one place  \n✅ **Easy to manage**: Delete a post = delete one folder  \n✅ **Better organization**: No searching through global asset folders  \n✅ **Portable**: Easy to move posts between projects  \n✅ **Scalable**: Clean structure even with hundreds of posts  \n✅ **Version control**: See all changes to a post in one place  \n✅ **TOC-friendly**: H2/H3 structure automatically creates navigation  \n\n## Troubleshooting\n\n### Images not loading?\n- Check that paths use `./` prefix: `![Image](./assets/image.jpg)`\n- Verify image files exist in the correct location\n- Run the build script: `npm run build`\n- Clear browser cache (Ctrl+Shift+R or Cmd+Shift+R)\n\n### Post not appearing?\n- Ensure `index.md` exists in the post directory\n- Check frontmatter syntax (YAML format)\n- Run build script and check for errors\n- Verify the post directory is in `posts/` not `posts-backup/`\n\n### Build errors?\n- Check that all directories have `index.md`\n- Verify frontmatter has closing `---`\n- Ensure no special characters in directory names (use lowercase with hyphens)\n\n### TOC not showing?\n- Ensure your markdown has H2 (`##`) or H3 (`###`) headings\n- H1 (`#`) headings are ignored (reserved for post title)\n- Build script must be run after markdown changes\n- Check browser console for JavaScript errors\n\n### TOC sections not collapsible?\n- H2 headings only show expand arrow if they have H3 children\n- Main TOC is always collapsible\n- Clear cache and hard refresh browser\n\n### Content not updating?\n- Run `npm run build` after editing markdown\n- Check that JSON files were regenerated in `data/`\n- Clear browser cache (Ctrl+Shift+R)\n\n## Writing Tips for Better TOC\n\n### Use Proper Heading Hierarchy\n```markdown\n# Post Title (H1 - used for page title, not in TOC)\n\n## Introduction (H2 - appears in TOC as main section)\nContent here...\n\n## Main Topic (H2 - collapsible if it has H3 children)\n\n### Subtopic 1 (H3 - nested under Main Topic)\nContent...\n\n### Subtopic 2 (H3 - nested under Main Topic)\nContent...\n\n## Conclusion (H2 - appears in TOC as main section)\nFinal thoughts...\n```\n\n### Best Practices\n- ✅ Use descriptive heading text (becomes TOC labels)\n- ✅ Keep headings concise (TOC has limited width)\n- ✅ Use H2 for main sections, H3 for subsections\n- ✅ Don't skip levels (H2 → H4 is bad structure)\n- ❌ Avoid special characters in headings (affects ID generation)\n- ❌ Don't use H1 in content (reserved for post title)\n\n## Quick Reference\n\n```bash\n# Create new blog post\nmkdir content/blog/posts/my-new-post && mkdir content/blog/posts/my-new-post/assets\ncp content/blog/template/index.md content/blog/posts/my-new-post/index.md\n\n# Create new project\nmkdir content/projects/posts/my-new-project && mkdir content/projects/posts/my-new-project/assets\ncp content/projects/template/index.md content/projects/posts/my-new-project/index.md\n\n# Build content (generates JSON from markdown)\nnpm run build\n\n# Test locally\nnpx serve .\n# or\npython -m http.server 8080\n\n# View structure (PowerShell on Windows)\ntree blog\\posts /F\ntree projects\\posts /F\n```\n\n## Summary\n\nThe modular structure combined with automatic TOC generation provides:\n\n1. **Organization**: Each post/project is self-contained with all assets\n2. **Navigation**: Automatic table of contents for easy navigation\n3. **Flexibility**: Easy to add, edit, or remove content\n4. **Performance**: Pre-built JSON for fast loading\n5. **Developer Experience**: Clear structure, easy to understand\n6. **User Experience**: Enhanced navigation with collapsible sections\n\nSimply create a folder, add `index.md` with proper H2/H3 headings, run `npm run build`, and you have a fully navigable post with automatic table of contents!\n\n## Questions?\n\nIf you encounter any issues or have questions about the structure, refer to:\n- **Template files**: `content/blog/template/index.md` and `content/projects/template/index.md`\n- **Build script**: `scripts/build-content.js`\n- **Content management**: See `CONTENT_MANAGEMENT.md` for editing site text\n- **Implementation details**: See `IMPLEMENTATION_SUMMARY.md` for technical details\n",
    "excerpt": "Your blog posts and projects now use a **modular directory structure** where each post/project has its own folder containing all related assets (images, files, etc.).",
    "filename": "MODULAR-STRUCTURE.md"
  },
  {
    "slug": "IMPLEMENTATION_SUMMARY",
    "title": "Portfolio Website - Implementation Summary",
    "content": "# Portfolio Website - Implementation Summary\n\n## Overview\nA modern, performant portfolio website built with vanilla HTML, CSS, and JavaScript. Features include markdown-based content management, centralized site content control, and enhanced UX with collapsible UI components and table of contents navigation.\n\n## Core Solutions Implemented\n\n### 1. GitHub Pages Markdown Compatibility\n**Problem**: GitHub Pages blocks fetching `.md` files via JavaScript due to CORS restrictions and MIME type mismatches.\n\n**Solution**: Pre-generate JSON files from markdown content using a Node.js build script.\n\n### 2. Centralized Content Management\n**Problem**: Site text scattered across multiple HTML files, requiring HTML knowledge for updates.\n\n**Solution**: Single JSON file (`data/site-content.json`) controls all static site text with JavaScript loader utility.\n\n### 3. Enhanced Navigation & UX\n**Problem**: Long blog/project posts difficult to navigate, skills section cluttered on homepage.\n\n**Solution**: \n- Auto-generated table of contents with nested collapsible structure\n- Collapsible skill categories on homepage\n- Sticky positioning and scroll-spy active highlighting\n\n## Architecture\n\n### File Structure\n```\ndata/\n├── site-content.json       # All static site text (hero, about, contact, etc.)\n├── blog-posts.json         # Generated from markdown\n└── projects.json           # Generated from markdown\n\njs/\n├── content-loader.js       # Content management utility\n├── blog.js                 # Blog + TOC generation\n├── projects.js             # Projects + TOC generation\n├── index.js                # Homepage\n└── main.js                 # Navigation\n\ncss/\n├── style.css               # Main styles + collapsible skills\n└── blog.css                # Blog/project styles + TOC sidebar\n\nscripts/\n└── build-content.js        # Markdown → JSON build script\n\n.github/workflows/\n└── build-content.yml       # Auto-build on push\n```\n\n## Key Features Implemented\n\n### 1. Markdown Build System\n\n**Files**:\n- `scripts/build-content.js` - Build script\n- `data/blog-posts.json` - Generated blog data\n- `data/projects.json` - Generated project data\n- `.github/workflows/build-content.yml` - Auto-build workflow\n\n**Functionality**:\n- Reads markdown from `blog/posts/*/index.md` and `projects/posts/*/index.md`\n- Parses frontmatter metadata (title, date, tags, etc.)\n- Generates JSON files for static hosting\n- Excludes template files\n- GitHub Actions auto-builds on markdown changes\n\n### 2. Content Management System\n\n**Files**:\n- `data/site-content.json` - Centralized content store\n- `js/content-loader.js` - Content loader utility\n\n**Functionality**:\n- All static site text in single JSON file\n- Dot-notation path access (e.g., `hero.greeting`)\n- Populate single or multiple elements at once\n- Render complex structures (skills, experience, footer, etc.)\n- Initialize hero typed text animation\n- No HTML editing required for content updates\n\n**Content Sections**:\n- `personal` - Name, email, social links, resume\n- `hero` - Homepage hero section\n- `about` - About page sections, skills, experience\n- `homepage` - Homepage-specific content (collapsible skills)\n- `projects` - Projects page header\n- `blog` - Blog page header\n- `contact` - Contact page content\n- `footer` - Footer links and copyright\n\n### 3. Table of Contents (TOC) System\n\n**Files**:\n- `css/blog.css` (lines 752-960) - TOC styling\n- `js/blog.js` - TOC generation for blog\n- `js/projects.js` - TOC generation for projects\n\n**Features**:\n- **Auto-generation**: Parses H2/H3 headings from markdown-rendered HTML\n- **Nested Structure**: H3 headings collapsible under parent H2s\n- **Collapsible Main TOC**: Closed by default, expands on click\n- **Sticky Positioning**: Follows scroll, stays below navbar (86px offset)\n- **Active Highlighting**: Current section highlighted during scroll\n- **Smooth Navigation**: Click to scroll to sections\n- **Z-index Management**: Navbar (999) > TOC (100)\n\n**Implementation Details**:\n- `generateTableOfContents()`: Parses HTML, creates nested structure\n- `addHeadingIds()`: Generates kebab-case IDs from heading text\n- `setupScrollSpy()`: Handles expand/collapse, navigation, active state\n- `alignTOCWithContent()`: Dynamic positioning (navbar height + spacing)\n- Chevron icons with CSS rotation animations\n- Max-height transitions for smooth expansion\n\n### 4. Collapsible Skills Categories\n\n**Files**:\n- `css/style.css` (lines 1366-1419) - Skills styling\n- `js/content-loader.js` - renderHomeSkills() function\n\n**Features**:\n- **Card Design**: Border, background, hover effects\n- **Collapsed by Default**: Uses HTML5 details/summary\n- **Chevron Icons**: 14px SVG with 180° rotation on open\n- **Smooth Animations**: CSS transitions for expand/collapse\n- **Category Organization**: Skills grouped (Frontend, Backend, etc.)\n- **Interactive**: Cursor pointer, hover state changes\n\n## Workflow\n\n### Editing Site Content (Instant Updates)\n```bash\n# 1. Edit data/site-content.json\n# 2. Refresh browser - changes appear immediately!\n# No build step needed\n```\n\n### Editing Blog/Project Posts\n```bash\n# 1. Edit markdown files in blog/posts/*/index.md or projects/posts/*/index.md\n# 2. Build JSON files\nnpm run build\n\n# 3. Test locally\nnpx serve .\n\n# 4. Commit and push\ngit add .\ngit commit -m \"Update content\"\ngit push\n```\n\n### Automatic Deployment\n- GitHub Actions automatically rebuilds JSON when markdown files change\n- Commits updated JSON back to repository\n- Changes are live on GitHub Pages immediately\n\n## Benefits\n\n### Performance\n✅ No framework overhead - pure vanilla JavaScript\n✅ Fast page loads - no markdown parsing in browser\n✅ Optimized animations - CSS transitions + requestAnimationFrame\n✅ Efficient scroll tracking - scroll spy with RAF\n\n### Developer Experience\n✅ Easy content management - single JSON file\n✅ No HTML knowledge required for updates\n✅ Markdown remains source of truth\n✅ Automatic builds via GitHub Actions\n✅ Version control friendly\n\n### User Experience\n✅ Enhanced navigation - TOC sidebar on long posts\n✅ Better organization - collapsible UI components\n✅ Smooth interactions - CSS transitions throughout\n✅ Active highlighting - know where you are while scrolling\n✅ Responsive design - works on all devices\n\n### Maintainability\n✅ Centralized content - single source of truth\n✅ Modular structure - each post in own directory\n✅ Clean separation - content vs structure vs style\n✅ Consistent patterns - reusable details/summary components\n\n## Technical Details\n\n### TOC Generation Algorithm\n1. Parse HTML content for H2 and H3 headings\n2. Detect parent-child relationships (H3s under H2s)\n3. Generate kebab-case IDs from heading text\n4. Create nested HTML structure with details/summary\n5. Add expand icons only to H2s with children\n6. Setup click handlers for navigation and expansion\n7. Initialize scroll spy for active state tracking\n\n### Positioning Calculations\n```javascript\n// TOC alignment with header bottom\nconst blogHeader = document.querySelector('.blog-post-header');\nconst marginTop = blogHeader.offsetTop + blogHeader.offsetHeight;\ntoc.style.marginTop = `${marginTop}px`;\n\n// Sticky positioning offset (navbar + spacing)\nconst navbarHeight = 70; // px\nconst spacing = 16; // px\nconst stickyTop = 86; // px (70 + 16)\ntoc.style.top = `${stickyTop}px`;\n```\n\n### CSS Transitions\n```css\n/* Chevron rotation */\n.toc-expand-icon, .skill-chevron {\n    transition: transform var(--transition-base);\n}\n\n[open] .chevron {\n    transform: rotate(180deg); /* or 90deg for h2 expand */\n}\n\n/* Height transitions */\n.toc-h3-list {\n    max-height: 0;\n    transition: max-height var(--transition-base);\n}\n\n.toc-h2.expanded + .toc-h3-list {\n    max-height: 500px; /* Large enough for content */\n}\n```\n\n### Scroll Spy Pattern\n```javascript\nfunction updateActiveHeading(tocLinks) {\n    requestAnimationFrame(() => {\n        // Find current section based on scroll position\n        // Update active class on TOC link\n        // Repeat on next frame\n    });\n}\n```\n\n## Testing Checklist\n- [x] Build script generates valid JSON\n- [x] Blog page loads posts from JSON\n- [x] Projects page loads from JSON\n- [x] Homepage shows featured content\n- [x] TOC generates correctly on blog posts\n- [x] TOC generates correctly on project posts\n- [x] TOC sticky positioning works\n- [x] TOC nested collapsible structure works\n- [x] Skills categories collapsible on homepage\n- [x] Content management system loads all pages\n- [x] GitHub Actions auto-build works\n- [x] Live on GitHub Pages\n\n## Cache Versioning\n\nCSS and JavaScript files use query string versioning to ensure browsers load latest versions:\n\n```html\n<!-- Example -->\n<link rel=\"stylesheet\" href=\"css/style.css?v=20251009-59\">\n<script src=\"js/content-loader.js?v=20251009-59\"></script>\n```\n\n**Version Format**: `YYYYMMDD-NN` (date + increment)\n\n**Update Process**:\n1. Make changes to CSS/JS files\n2. Increment version number in HTML files\n3. Test with hard refresh (Ctrl+Shift+R)\n4. Commit and deploy\n\n## Documentation Files\n\n- **README.md** - Project overview, setup, features\n- **CONTENT_MANAGEMENT.md** - Complete content editing guide\n- **MODULAR-STRUCTURE.md** - Blog/project directory structure\n- **IMPLEMENTATION_SUMMARY.md** - Technical implementation details (this file)\n",
    "excerpt": "A modern, performant portfolio website built with vanilla HTML, CSS, and JavaScript. Features include markdown-based content management, centralized site content control, and enhanced UX with collapsi...",
    "filename": "IMPLEMENTATION_SUMMARY.md"
  }
]