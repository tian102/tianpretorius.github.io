[
  {
    "slug": "saas-platform",
    "filename": "saas-platform.md",
    "title": "SaaS Platform",
    "description": "A comprehensive SaaS platform with user management, billing, and analytics dashboard built for scalability.",
    "tags": [
      "saas",
      "react",
      "node",
      "typescript",
      "stripe"
    ],
    "demo": "https://demo.example.com",
    "github": "https://github.com/tianpretorius/saas-platform",
    "image": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800",
    "date": "2024-03-15",
    "content": "\n# SaaS Platform\n\nA full-stack SaaS application designed to handle multi-tenant architecture with robust user management and subscription billing.\n\n## Key Features\n\n- **Multi-tenant Architecture**: Secure data isolation per organization\n- **Subscription Billing**: Integrated with Stripe for recurring payments\n- **Analytics Dashboard**: Real-time metrics and insights\n- **Role-based Access Control**: Granular permissions management\n- **REST API**: Well-documented API for third-party integrations\n\n## Technology Stack\n\n- **Frontend**: React, TypeScript, Tailwind CSS\n- **Backend**: Node.js, Express, PostgreSQL\n- **Infrastructure**: Docker, AWS, Redis\n- **Payment**: Stripe Integration\n- **Auth**: JWT with refresh tokens\n\n## Challenges Overcome\n\nOne of the biggest challenges was implementing efficient multi-tenancy while maintaining data security and query performance. I solved this using a hybrid approach with schema-per-tenant for larger clients and shared schema with row-level security for smaller accounts.\n\n## Results\n\n- Handles 10,000+ active users\n- 99.9% uptime SLA\n- Sub-200ms API response times\n- Successfully processing $100K+ MRR\n"
  },
  {
    "slug": "real-time-dashboard",
    "filename": "real-time-dashboard.md",
    "title": "Real-Time Analytics Dashboard",
    "description": "High-performance dashboard displaying real-time metrics with WebSocket connections and interactive visualizations.",
    "tags": [
      "react",
      "websocket",
      "chartjs",
      "python",
      "redis"
    ],
    "demo": "https://dashboard.example.com",
    "github": "https://github.com/tianpretorius/analytics-dashboard",
    "image": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800",
    "date": "2024-01-20",
    "content": "\n# Real-Time Analytics Dashboard\n\nA powerful real-time analytics dashboard that processes and visualizes thousands of events per second with minimal latency.\n\n## Key Features\n\n- **Real-Time Updates**: WebSocket-based live data streaming\n- **Interactive Charts**: Customizable visualizations with Chart.js\n- **Data Aggregation**: Efficient time-series data processing\n- **Responsive Design**: Works seamlessly on all devices\n- **Export Capabilities**: Download reports in CSV/PDF formats\n\n## Technology Stack\n\n- **Frontend**: React, Redux, Chart.js, Socket.io\n- **Backend**: Python, FastAPI, Redis, PostgreSQL\n- **Real-time**: WebSocket connections\n- **Caching**: Redis for fast data retrieval\n\n## Performance Optimizations\n\nImplemented several optimization strategies:\n- Data aggregation at ingestion time\n- In-memory caching with Redis\n- Efficient WebSocket connection pooling\n- Debounced chart re-rendering\n- Virtual scrolling for large datasets\n\n## Impact\n\nThe dashboard reduced decision-making time by 60% by providing instant insights into critical business metrics. It now serves as the central monitoring tool for the entire operations team.\n"
  },
  {
    "slug": "mobile-fitness-app",
    "filename": "mobile-fitness-app.md",
    "title": "Mobile Fitness Tracker",
    "description": "Cross-platform mobile app for workout tracking, meal planning, and progress analytics with offline-first capabilities.",
    "tags": [
      "react-native",
      "mobile",
      "firebase",
      "typescript"
    ],
    "demo": "https://apps.apple.com/app/fitness-tracker",
    "github": "",
    "image": "https://images.unsplash.com/photo-1476480862126-209bfaa8edc8?w=800",
    "date": "2023-11-10",
    "content": "\n# Mobile Fitness Tracker\n\nA comprehensive fitness tracking application built with React Native, featuring workout logging, nutrition tracking, and detailed progress analytics.\n\n## Key Features\n\n- **Workout Tracking**: Log exercises with sets, reps, and weights\n- **Meal Planning**: Track calories and macronutrients\n- **Progress Photos**: Visual progress tracking over time\n- **Offline Mode**: Full functionality without internet connection\n- **Social Features**: Share achievements with friends\n- **Custom Workouts**: Create and save personalized routines\n\n## Technology Stack\n\n- **Framework**: React Native (iOS & Android)\n- **State Management**: Redux Toolkit\n- **Backend**: Firebase (Auth, Firestore, Storage)\n- **Local Storage**: WatermelonDB for offline-first architecture\n- **Charts**: Victory Native for data visualizations\n\n## Technical Highlights\n\n### Offline-First Architecture\n\nImplemented a robust offline-first system using WatermelonDB that syncs seamlessly with Firebase when connectivity is restored. This ensures users can log workouts anywhere, anytime.\n\n### Performance\n\n- Optimized images with lazy loading and caching\n- Implemented memoization for expensive calculations\n- Used FlatList optimization for smooth scrolling\n- Reduced app size by 40% through code splitting\n\n## User Reception\n\n- 4.8â˜… rating on App Store\n- 10,000+ downloads in first 3 months\n- Featured in \"New Apps We Love\"\n- 70% daily active user retention\n"
  },
  {
    "slug": "api-gateway",
    "filename": "api-gateway.md",
    "title": "Microservices API Gateway",
    "description": "High-performance API gateway handling authentication, rate limiting, and request routing for microservices architecture.",
    "tags": [
      "golang",
      "microservices",
      "docker",
      "kubernetes",
      "api"
    ],
    "demo": "",
    "github": "https://github.com/tianpretorius/api-gateway",
    "image": "projects\\images\\background-project-image.jpg",
    "date": "2023-09-05",
    "content": "\n# Microservices API Gateway\n\nA custom-built API gateway in Go designed to handle high-throughput traffic with intelligent routing, caching, and security features.\n\n## Key Features\n\n- **Intelligent Routing**: Dynamic service discovery and load balancing\n- **Authentication**: JWT validation with token refresh\n- **Rate Limiting**: Configurable per-endpoint rate limits\n- **Request/Response Caching**: Redis-based caching layer\n- **Circuit Breaker**: Automatic failover and retry logic\n- **Monitoring**: Built-in metrics and distributed tracing\n\n## Technology Stack\n\n- **Language**: Go (Golang)\n- **Cache**: Redis\n- **Service Mesh**: Kubernetes with Istio\n- **Monitoring**: Prometheus & Grafana\n- **Containerization**: Docker\n\n## Architecture Decisions\n\n### Why Go?\n\nChose Go for its exceptional performance, built-in concurrency, and low memory footprint. The gateway handles 50,000+ requests per second on modest hardware.\n\n### Rate Limiting Strategy\n\nImplemented a distributed rate limiter using Redis and the token bucket algorithm, ensuring fair resource allocation across all microservices.\n\n## Performance Metrics\n\n- **Throughput**: 50,000+ RPS\n- **Latency**: p99 < 10ms\n- **Uptime**: 99.99%\n- **Memory Usage**: < 100MB under load\n\n## Security Features\n\n- TLS termination\n- SQL injection prevention\n- CORS configuration\n- Request validation and sanitization\n- IP whitelisting/blacklisting\n\nThe gateway serves as the single entry point for all external API requests, providing a secure and performant interface to our microservices ecosystem.\n"
  }
]