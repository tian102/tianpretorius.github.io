document.addEventListener('DOMContentLoaded', async function() {
    const urlParams = new URLSearchParams(window.location.search);
    const postSlug = urlParams.get('post');
    
    // List of markdown files in blog/posts directory
    const blogPostFiles = [
        'unemployed-to-saas-founder.md',
        'building-scalable-systems.md',
        'my-saas-tech-stack.md',
        'sample-post.md'
    ];
    
    let allPosts = [];
    let currentFilter = 'all';
    let currentSort = 'date-desc';
    
    // Parse frontmatter from markdown
    function parseFrontmatter(content) {
        const frontmatterRegex = /^---\n([\s\S]*?)\n---\n([\s\S]*)$/;
        const match = content.match(frontmatterRegex);
        
        if (!match) {
            return { metadata: {}, content: content };
        }
        
        const frontmatterText = match[1];
        const mainContent = match[2];
        
        const metadata = {};
        frontmatterText.split('\n').forEach(line => {
            const [key, ...valueParts] = line.split(':');
            if (key && valueParts.length > 0) {
                const value = valueParts.join(':').trim();
                if (key.trim() === 'tags') {
                    metadata[key.trim()] = value.split(',').map(tag => tag.trim());
                } else {
                    metadata[key.trim()] = value;
                }
            }
        });
        
        return { metadata, content: mainContent };
    }
    
    // Load all blog posts
    async function loadBlogPosts() {
        const blogList = document.getElementById('blog-list');
        
        try {
            const posts = [
                'unemployed-to-saas-founder.md',
                'building-scalable-systems.md',
                'my-saas-tech-stack.md'
            ];
            
            allPosts = await Promise.all(posts.map(async (filename) => {
                const response = await fetch(`blog/posts/${filename}`);
                const markdown = await response.text();
                const { metadata, content } = parseFrontmatter(markdown);
                
                const title = metadata.title || content.split('\n')[0].replace(/^#\s*/, '');
                const excerpt = content.split('\n').slice(1, 4).join(' ').substring(0, 150) + '...';
                const date = metadata.date || '2024-10-01';
                const tags = metadata.tags || [];
                const slug = filename.replace('.md', '');
                
                return { title, excerpt, date, tags, slug, filename, content };
            }));
            
            // Populate tag filter
            populateTagFilter();
            
            // Display posts
            displayPosts();
            
        } catch (error) {
            console.error('Error loading blog posts:', error);
            blogList.innerHTML = '<p>Error loading blog posts. Please try again later.</p>';
        }
    }
    
    // Populate tag filter dropdown
    function populateTagFilter() {
        const tagFilter = document.getElementById('tag-filter');
        const allTags = new Set();
        
        allPosts.forEach(post => {
            post.tags.forEach(tag => allTags.add(tag));
        });
        
        const sortedTags = Array.from(allTags).sort();
        
        sortedTags.forEach(tag => {
            const option = document.createElement('option');
            option.value = tag;
            option.textContent = tag.charAt(0).toUpperCase() + tag.slice(1);
            tagFilter.appendChild(option);
        });
    }
    
    // Filter and sort posts
    function filterAndSortPosts() {
        let filteredPosts = [...allPosts];
        
        // Filter by tag
        if (currentFilter !== 'all') {
            filteredPosts = filteredPosts.filter(post => 
                post.tags.includes(currentFilter)
            );
        }
        
        // Sort posts
        filteredPosts.sort((a, b) => {
            switch (currentSort) {
                case 'date-desc':
                    return new Date(b.date) - new Date(a.date);
                case 'date-asc':
                    return new Date(a.date) - new Date(b.date);
                case 'title-asc':
                    return a.title.localeCompare(b.title);
                case 'title-desc':
                    return b.title.localeCompare(a.title);
                default:
                    return 0;
            }
        });
        
        return filteredPosts;
    }
    
    // Display posts
    function displayPosts() {
        const blogList = document.getElementById('blog-list');
        const filteredPosts = filterAndSortPosts();
        
        if (filteredPosts.length === 0) {
            blogList.innerHTML = '<p class="no-results">No posts found matching your filters.</p>';
            return;
        }
        
        blogList.innerHTML = filteredPosts.map(post => `
            <article class="blog-card">
                <div class="blog-card-content">
                    <div class="blog-card-meta">
                        <span class="blog-date">${new Date(post.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
                        <span class="blog-read-time">${calculateReadTime(post.content)} min read</span>
                    </div>
                    <h2 class="blog-card-title">${post.title}</h2>
                    <p class="blog-card-excerpt">${post.excerpt}</p>
                    <div class="blog-card-tags">
                        ${post.tags.map(tag => `
                            <span class="blog-card-tag" data-tag="${tag}">${tag}</span>
                        `).join('')}
                    </div>
                    <a href="?post=${post.slug}" class="blog-card-link">Read More →</a>
                </div>
            </article>
        `).join('');
        
        // Add click handlers to tag chips
        document.querySelectorAll('.blog-card-tag').forEach(tagEl => {
            tagEl.addEventListener('click', (e) => {
                e.preventDefault();
                const tag = tagEl.getAttribute('data-tag');
                document.getElementById('tag-filter').value = tag;
                currentFilter = tag;
                displayPosts();
                updateActiveFilters();
            });
        });
    }
    
    // Update active filters display
    function updateActiveFilters() {
        const activeFiltersEl = document.getElementById('active-filters');
        
        if (currentFilter === 'all') {
            activeFiltersEl.innerHTML = '';
            return;
        }
        
        activeFiltersEl.innerHTML = `
            <div class="filter-tag">
                <span>${currentFilter}</span>
                <button class="filter-tag-remove" aria-label="Remove filter">×</button>
            </div>
        `;
        
        activeFiltersEl.querySelector('.filter-tag-remove').addEventListener('click', () => {
            currentFilter = 'all';
            document.getElementById('tag-filter').value = 'all';
            displayPosts();
            updateActiveFilters();
        });
    }
    
    // Load individual blog post
    async function loadBlogPost(slug) {
        const blogList = document.getElementById('blog-list');
        const blogPost = document.getElementById('blog-post');
        
        blogList.classList.add('hidden');
        blogPost.classList.remove('hidden');
        
        try {
            const post = allPosts.find(p => p.slug === slug);
            if (!post) {
                blogPost.innerHTML = '<p>Blog post not found.</p>';
                return;
            }
            
            const htmlContent = parseMarkdown(post.content);
            
            blogPost.innerHTML = `
                <article class="blog-post">
                    <header class="blog-post-header">
                        <a href="blog.html" class="back-link">← Back to Blog</a>
                        <h1>${post.title}</h1>
                        <div class="blog-post-meta">
                            <span class="blog-date">${new Date(post.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
                            <span class="blog-read-time">${calculateReadTime(post.content)} min read</span>
                        </div>
                        <div class="post-tags">
                            ${post.tags.map(tag => `
                                <a href="blog.html?tag=${tag}" class="post-tag">${tag}</a>
                            `).join('')}
                        </div>
                    </header>
                    <div class="blog-post-content">
                        ${htmlContent}
                    </div>
                </article>
            `;
            
        } catch (error) {
            console.error('Error loading blog post:', error);
            blogPost.innerHTML = '<p>Error loading blog post. Please try again later.</p>';
        }
    }
    
    // Calculate read time
    function calculateReadTime(content) {
        const wordsPerMinute = 200;
        const wordCount = content.trim().split(/\s+/).length;
        return Math.ceil(wordCount / wordsPerMinute);
    }
    
    function parseMarkdown(md) {
        // Basic markdown parser
        let html = md;
        
        // Convert code blocks
        html = html.replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code>$2</code></pre>');
        
        // Convert inline code
        html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
        
        // Convert links
        html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');
        
        // Convert headers
        html = html.replace(/^### (.+)$/gm, '<h3>$1</h3>');
        html = html.replace(/^## (.+)$/gm, '<h2>$1</h2>');
        html = html.replace(/^# (.+)$/gm, '<h1>$1</h1>');
        
        // Convert paragraphs
        html = html.split('\n\n').map(block => {
            if (!block.startsWith('<h') && !block.startsWith('<pre') && block.trim()) {
                return '<p>' + block.replace(/\n/g, '<br>') + '</p>';
            }
            return block;
        }).join('\n');
        
        return html;
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
        const urlParams = new URLSearchParams(window.location.search);
        const postSlug = urlParams.get('post');
        const tagParam = urlParams.get('tag');
        
        loadBlogPosts().then(() => {
            if (tagParam) {
                currentFilter = tagParam;
                document.getElementById('tag-filter').value = tagParam;
                displayPosts();
                updateActiveFilters();
            } else if (postSlug) {
                loadBlogPost(postSlug);
            }
        });
        
        // Filter event listeners
        const tagFilter = document.getElementById('tag-filter');
        const sortFilter = document.getElementById('sort-filter');
        
        if (tagFilter) {
            tagFilter.addEventListener('change', (e) => {
                currentFilter = e.target.value;
                displayPosts();
                updateActiveFilters();
            });
        }
        
        if (sortFilter) {
            sortFilter.addEventListener('change', (e) => {
                currentSort = e.target.value;
                displayPosts();
            });
        }
    });
});
